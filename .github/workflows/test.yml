name: Tests

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  CARGO_TERM_COLOR: always

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_USER: test
          POSTGRES_DB: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

      mongodb:
        image: mongo:7
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: password123
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 27017:27017

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Cache Cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Check formatting
      run: cargo fmt -- --check

    - name: Run Clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Run unit tests
      env:
        DATABASE_URL: postgres://test:test@localhost:5432/test
        REDIS_URL: redis://localhost:6379
        MONGODB_URL: mongodb://admin:password123@localhost:27017
        JWT_SECRET: test-secret-key-for-ci
      run: cargo test --lib

    - name: Run integration tests
      env:
        DATABASE_URL: postgres://test:test@localhost:5432/test
        REDIS_URL: redis://localhost:6379
        MONGODB_URL: mongodb://admin:password123@localhost:27017
        JWT_SECRET: test-secret-key-for-ci
      run: cargo test --test integration_handlers

    - name: Generate test coverage
      env:
        DATABASE_URL: postgres://test:test@localhost:5432/test
        REDIS_URL: redis://localhost:6379
        MONGODB_URL: mongodb://admin:password123@localhost:27017
        JWT_SECRET: test-secret-key-for-ci
      run: |
        cargo install cargo-tarpaulin
        cargo tarpaulin --out xml --output-dir ./coverage

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage/cobertura.xml
        fail_ci_if_error: true

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: unit-tests

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_USER: test
          POSTGRES_DB: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

      mongodb:
        image: mongo:7
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: password123
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 27017:27017

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache Cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install Node dependencies
      run: npm ci

    - name: Install Playwright Browsers
      run: npx playwright install --with-deps

    - name: Build Rust application
      env:
        DATABASE_URL: postgres://test:test@localhost:5432/test
        REDIS_URL: redis://localhost:6379
        MONGODB_URL: mongodb://admin:password123@localhost:27017
        JWT_SECRET: test-secret-key-for-ci
      run: cargo build --release

    - name: Run database migrations
      env:
        DATABASE_URL: postgres://test:test@localhost:5432/test
      run: |
        cargo install sqlx-cli --no-default-features --features native-tls,postgres
        sqlx migrate run

    - name: Run E2E tests
      env:
        DATABASE_URL: postgres://test:test@localhost:5432/test
        REDIS_URL: redis://localhost:6379
        MONGODB_URL: mongodb://admin:password123@localhost:27017
        JWT_SECRET: test-secret-key-for-ci
        CI: true
      run: npm run test:e2e

    - name: Upload E2E test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 30

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache Cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Run security audit
      run: |
        cargo install cargo-audit
        cargo audit

    - name: Check for known vulnerabilities
      run: |
        cargo install cargo-deny
        cargo deny check advisories